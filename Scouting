import java.util.*;
import bwapi.*;
import bwta.BWTA;
import bwta.BaseLocation;

public class Pinfel_Bot extends DefaultBWListener
{
	public static void main(String[] args)
	{
		new Pinfel_Bot().run();
	}
	
	private Mirror mirror = new Mirror();
	private Game game;
	private Player self;
	public void run()
	{
		mirror.getModule().setEventListener(this);
		mirror.startGame();
	}
	
	Set<Position> startLocationPositionSet = new HashSet<Position>();
	Set<Position> unexploredStartLocationPositionSet = new HashSet<Position>();
	Boolean scoutingProbeFound = false;
	Boolean scoutingProbeActive = false;
	Boolean enemyBaseFound = false;
	Unit scoutingProbe = null;
	Position closestUnexploredStartLocation = null;
	Position enemyBasePosition = null;
	
	HashSet<Position> startLocationSet = new HashSet<Position>();
	
	@Override
	public void onStart()
	{
		game = mirror.getGame();
		self = game.self();
		game.setLocalSpeed(20);
		game.setLatCom(false);
		
		BWTA.readMap();
		BWTA.analyze();		
		
		for (BaseLocation startLocation : BWTA.getStartLocations())
	    {
	        TilePosition tileCorrespondingToStartLocation = new TilePosition (startLocation.getX()/32, startLocation.getY()/32);
	        Position positionCorrespondingToStartLocation = tileCorrespondingToStartLocation.toPosition();
	        startLocationPositionSet.add(positionCorrespondingToStartLocation);
	    }
	    
	    unexploredStartLocationPositionSet = startLocationPositionSet;
	}
	
	@Override
	public void onFrame()
	{
		if (self.allUnitCount(UnitType.Protoss_Pylon) >= 1)
	    {
	        scoutingProbeActive = true;
	    }
	    
	    if (scoutingProbeActive && !scoutingProbeFound)
	    {
	        for (Unit myUnit : self.getUnits())
	        {
	            if (myUnit.getType() == UnitType.Protoss_Probe)
	            {
	                scoutingProbe = myUnit;
	                scoutingProbeFound = true;
	                break;
	            }
	        }
	    }
	    
	    if (scoutingProbeFound)
	    {
	        if (!scoutingProbe.exists())
	        {
	            scoutingProbe = null;
	            scoutingProbeFound = false;
	        }
	        
	        if (!enemyBaseFound)
	        {
	            scoutingProbe.move(closestUnexploredStartLocation);
	        }
	        
	        if (enemyBaseFound)
	        {
	        
	        }
	    }
	        
	    for (Position unexploredStartLocationPosition : unexploredStartLocationPositionSet)
	    {         
	        if (closestUnexploredStartLocation == null || scoutingProbe.getDistance(unexploredStartLocationPosition) < scoutingProbe.getDistance(closestUnexploredStartLocation))
	        closestUnexploredStartLocation = unexploredStartLocationPosition;
	    }
	    
	    for (Position startLocationPosition : startLocationPositionSet)
	    {
	        if (game.isExplored(startLocationPosition.getX()/32, startLocationPosition.getY()/32))
	        {
	            unexploredStartLocationPositionSet.remove(startLocationPosition);
	            break;
	         }
	         
	         TilePosition tileCorrespondingToStartLocationPosition = new TilePosition (startLocationPosition.getX()/32, startLocationPosition.getY()/32);
	         if (game.getUnitsOnTile(tileCorrespondingToStartLocationPosition).contains(UnitType.Buildings) && !enemyBaseFound)
	         {
	             enemyBasePosition = tileCorrespondingToStartLocationPosition.toPosition();
	             enemyBaseFound = true;
	         }
	     }
	}
}
