import java.util.*;
import bwapi.*;
import bwta.BWTA;
import bwta.BaseLocation;

public class TestBot1 extends DefaultBWListener {
	public static void main(String[] args) {
		new TestBot1().run();
	}
	
	private Mirror mirror = new Mirror();
	private Game game;
	private Player self;
	public void run() {
		mirror.getModule().setEventListener(this);
		mirror.startGame();
	}	
	
	//Used to check if we are still in build order: if build is disrupted or completed, use default bot behavior.
	Boolean buildOrderInProgress = true;
	
	//Set that contains what we consider 'safe' minerals, i.e within range of a completed Nexus.
	Set<Unit> safeMinerals = new HashSet<Unit>();

	
	
	//START
	@Override
	public void onStart() {
		game = mirror.getGame();
		self = game.self();
		game.setLocalSpeed(15);
		game.setLatCom(false);
		game.enableFlag(1);
		
		BWTA.readMap();
		BWTA.analyze();		
		
	}
			
	//ON-FRAME
	@Override
	public void onFrame() {
		
		game.drawTextScreen(10, 10, "Playing as " + self.getName() + " - " + self.getRace() + " VS " + game.enemy().getName() + " - " + game.enemy().getRace());
		game.drawTextScreen(10, 20, "Frame count: " + game.getFrameCount());
		
		//ON-FRAME :: ITERATE OVER SAFE MINERALS
		for (Unit safeMineral : safeMinerals) {
			
			//** DEBUG - Draws a red circle for each mineral field that is considered 'safe'. **	
			game.drawCircleMap(safeMineral.getPosition(), 20, Color.Red); 	
		}

		//ON-FRAME :: ITERATE OVER NEUTRAL UNITS
		for (Unit neutralUnit : game.getNeutralUnits()) {
			
			//ON-FRAME :: ITERATE OVER NEUTRAL UNITS :: IF MINERAL FIELD
			//** Adds mineral field to set of 'safe' minerals if close enough to Nexus. Removes from set if it no longer meets criteria. **
			if (neutralUnit.getType() == UnitType.Resource_Mineral_Field) {
				int safeMineralDist = 250;
				for (Unit myNexus : self.getUnits()) {
					if (myNexus.getType() == UnitType.Protoss_Nexus && myNexus.isCompleted() && neutralUnit.getDistance(myNexus.getPosition()) < safeMineralDist) {
						safeMinerals.add(neutralUnit);
					}			
				}
				if (safeMinerals.contains(neutralUnit)) {
					Boolean mineralStillSafe = false;
					for (Unit myNexus : self.getUnits()) {
						if (myNexus.getType() == UnitType.Protoss_Nexus && myNexus.isCompleted() && neutralUnit.getDistance(myNexus.getPosition()) < safeMineralDist) {
							mineralStillSafe = true;
						}	
					}
					if (mineralStillSafe == false) {
						safeMinerals.remove(neutralUnit);
					}
				}
			}
		}
		
		//ON-FRAME :: ITERATE OVER SELF UNITS (STUFF TO DO REGARDLESS IF BUILD ORDER IS IN PROGRESS OR NOT)
		for (Unit myUnit : self.getUnits()) {
			
			//ON-FRAME :: ITERATE OVER SELF UNITS :: ITERATE OVER PROBES
			if (myUnit.getType() == UnitType.Protoss_Probe) {
				for (Unit safeMineral : safeMinerals) {
					if (myUnit.isIdle() && game.getFrameCount() - myUnit.getLastCommandFrame() > 3) {
						myUnit.gather(safeMineral);
					}
				}
			}
		}
		
		//ON-FRAME :: IF BUILD ORDER IN PROGRESS
		if (buildOrderInProgress) {
			
			//AGAINST PROTOSS, DO 9/9 PROXY GATE
			if (game.enemy().getRace() == Race.Protoss) {
				
				//KEEP MAKING PROBES UNTIL 9
				for (Unit myUnit : self.getUnits()) {
					if (myUnit.getType() == UnitType.Protoss_Nexus && self.allUnitCount(UnitType.Protoss_Probe) < 9
							&& game.getFrameCount() - myUnit.getLastCommandFrame() > 3 && !myUnit.isTraining()) {
						myUnit.build(UnitType.Protoss_Probe);
					}
				}
				
				//FIND APPROPRIATE BUILD TILE FOR PROXY FOR 2P MAP: WANT IN NATURAL
				if (game.getStartLocations().size() == 2) {
					
				}
								
				//FIND APPROPRIATE BUILD TILE FOR PROXY FOR 3P, 4P MAP: WANT IN MIDDLE OF POSSIBLE ENEMY LOCATIONS
				if (game.getStartLocations().size() > 2) {
					
				}
			}
			
			if (game.enemy().getRace() == Race.Zerg) {
				
			}
									
			if (game.enemy().getRace() == Race.Terran) {
				
			}
		}
		//ON-FRAME :: IF OUT OF BUILD ORDER
		if (!buildOrderInProgress) {
			if (game.enemy().getRace() == Race.Protoss) {
				
			}
			
			if (game.enemy().getRace() == Race.Zerg) {
				
			}
									
			if (game.enemy().getRace() == Race.Terran) {
				
			}
		}
	}	
}
